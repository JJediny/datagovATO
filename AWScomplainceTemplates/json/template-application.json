{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Provides resources directly required for the application, such as EC2 instances, autoscaling groups, and databases",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
				"Label": {
					"default": "Region Config"
				},
				"Parameters": ["pRegionAZ1Name", "pRegionAZ2Name"]
			}, {
				"Label": {
					"default": "Network (existing VPC config)"
				},
				"Parameters": ["pProductionCIDR", "pProductionVPC", "pDMZSubnetA", "pDMZSubnetB", "pAppPrivateSubnetA", "pAppPrivateSubnetB", "pDBPrivateSubnetA", "pDBPrivateSubnetB"]
			}, {
				"Label": {
					"default": "Application Configuration"
				},
				"Parameters": ["pWebInstanceType", "pWebServerAMI", "pAppInstanceType", "pAppAmi"]
			}, {
				"Label": {
					"default": "Database Configuration"
				},
				"Parameters": ["pDBName", "pDBUser", "pDBPassword", "pDBClass", "pDBAllocatedStorage"]
			}]
		},
		"Stack": {
			"Value": "3"
		},
		"VersionDate": {
			"Value": "20160510"
		},
		"Identifier": {
			"Value": "Data.gov Production Stack"
		},
		"Input": {
			"Description": "VPC, SubnetIDs, S3 bucket names, CIDR blocks, KeyNames, AMIs, DB name and password"
		},
		"Output": {
			"Description": "Outputs ID of all deployed resources"
		}
	},
	"Parameters": {
		"pSecurityAlarmTopic": {
			"Description": "SNS topic for alarms and notifications",
			"Type": "String",
			"Default": "Data.gov Test Application"
		},
		"pEC2KeyPair": {
			"Description": "Key Name for Instance",
			"Type": "String",
			"Default": ""
		},
		"pProductionCIDR": {
			"Description": "Production VPC CIDR",
			"Type": "String"
		},
		"pManagementCIDR": {
			"Description": "Management VPC CIDR",
			"Type": "String"
		},
		"pProductionVPC": {
			"Description": "Production VPC",
			"Type": "AWS::EC2::VPC::Id"
		},
		"pBastionSSHCIDR": {
			"Description": "CIDR block (optional) of Public IPs allowed to access Bastion instance in this deployment",
			"Type": "String",
			"Default": "0.0.0.0/0"
		},
		"pDMZSubnetA": {
			"Description": "DMZ Subnet A",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pDMZSubnetB": {
			"Description": "DMZ Subnet B",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pAppPrivateSubnetA": {
			"Description": "WebApp Subnet A",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pAppPrivateSubnetB": {
			"Description": "WebApp Subnet A",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pWebInstanceType": {
			"Description": "Instance type for the webservers",
			"Type": "String"
		},
		"pAppInstanceType": {
			"Description": "Instance type for the app webservers",
			"Type": "String"
		},
		"pDBPrivateSubnetA": {
			"Description": "rDBPrivateSubnetA",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pDBPrivateSubnetB": {
			"Description": "rDBPrivateSubnetB",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pRegionAZ1Name": {
			"Description": "rDBPrivateSubnetB",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"pRegionAZ2Name": {
			"Description": "rDBPrivateSubnetB",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"pWebServerAMI": {
			"Description": "Which webserver AMI do you want to use, default ",
			"Type": "String",
			"Default": "ami-f9c01792"
		},
		"pAppAmi": {
			"Description": "Which App AMI do you want to use?",
			"Type": "String",
			"Default": "ami-f9c01792"
		},
		"pDBNameMySQL": {
			"Description": "Name of RDS Database",
			"Type": "String"
		},
		"pDBUserMySQL": {
			"Description": "Username of DB Instance",
			"Type": "String"
		},
		"pDBPasswordMySQL": {
			"Description": "Password of DB Instance",
			"NoEcho": true,
			"Type": "String"
		},
		"pDBClassMySQL": {
			"Description": "Instance class of RDS instance",
			"Type": "String",
			"Default": "db.t2.medium"
		},
		"pDBAllocatedStorageMySQL": {
			"Description": "Allocated Storage (in GB) for RDS instance",
			"Type": "String",
			"Default": "10"
		},
		"pDBNamePostgreSQL": {
			"Description": "Name of RDS Database",
			"Type": "String"
		},
		"pDBUserPostgreSQL": {
			"Description": "Username of DB Instance",
			"Type": "String"
		},
		"pDBPasswordPostgreSQL": {
			"Description": "Password of DB Instance",
			"NoEcho": true,
			"Type": "String"
		},
		"pDBClassPostgreSQL": {
			"Description": "Instance class of RDS instance",
			"Type": "String",
			"Default": "db.m4.large"
		},
		"pDBAllocatedStoragePostgreSQL": {
			"Description": "Allocated Storage (in GB) for RDS instance",
			"Type": "String",
			"Default": "40"
		},
		"pEnvironment": {
			"Description": "Environment type (development, test, or production)",
			"Type": "String",
			"Default": "development"
		},
		"pSupportsGlacier": {
			"Description": "Determines whether this region supports Glacier (passed in from main template)",
			"Type": "String",
			"Default": "true"
		},
		"pTemplateUrlPrefix": {
			"Description": "URL prefix used to various assets",
			"Type": "String",
			"Default": ""
		}
	},
	"Mappings": {
		"elbMap": {
			"us-east-1": {
				"ELB": "127311923021"
			},
			"us-west-1": {
				"ELB": "027434742980"
			},
			"us-west-2": {
				"ELB": "797873946194"
			},
			"eu-west-1": {
				"ELB": "156460612806"
			},
			"ap-southeast-2": {
				"ELB": "783225319266"
			},
			"ap-southeast-1": {
				"ELB": "114774131450"
			},
			"ap-northeast-1": {
				"ELB": "582318560864"
			},
			"ap-northeast-2": {
				"ELB": "600734575887"
			},
			"eu-central-1": {
				"ELB": "054676820928"
			},
			"sa-east-1": {
				"ELB": "507241528517"
			},
			"us-gov-west-1": {
				"ELB": "048591011584"
			}
		}
	},
	"Conditions": {
		"IsGovCloud": {
			"Fn::Equals": [{
				"Ref": "AWS::Region"
			}, "us-gov-west-1"]
		},
		"SupportsGlacier": {
			"Fn::Equals": [{
				"Ref": "pSupportsGlacier"
			}, "true"]
		}
	},
	"Resources": {
		"rS3ELBAccessLogs": {
			"Type": "AWS::S3::Bucket",
			"DeletionPolicy": "Retain",
			"Properties": {
				"AccessControl": "Private"
			}
		},
		"rS3AccessLogsPolicy": {
			"Type": "AWS::S3::BucketPolicy",
			"DeletionPolicy": "Retain",
			"Properties": {
				"Bucket": {
					"Ref": "rS3ELBAccessLogs"
				},
				"PolicyDocument": {
					"Version": "2008-10-17",
					"Statement": [{
						"Sid": "ELBAccessLogs20130930",
						"Effect": "Allow",
						"Resource": {
							"Fn::Join": [
								"", [
									"arn:", {
										"Fn::If": ["IsGovCloud", "aws-us-gov", "aws"]
									},
									":s3:::", {
										"Ref": "rS3ELBAccessLogs"
									},
									"/",
									"Logs",
									"/AWSLogs/", {
										"Ref": "AWS::AccountId"
									},
									"/*"
								]
							]
						},
						"Principal": {
							"AWS": {
								"Fn::FindInMap": ["elbMap", {
									"Ref": "AWS::Region"
								}, "ELB"]
							}
						},
						"Action": [
							"s3:PutObject"
						]
					}]
				}
			}
		},
		"rSecurityGroupWeb": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group for Reverse Proxy in DMZ",
				"VpcId": {
					"Ref": "pProductionVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "sg-reverse-proxy-dmz"
				}, {
					"Key": "Environment",
					"Value": {
						"Ref": "pEnvironment"
					}
				}]
			}
		},
		"rSecurityGroupWebInstance": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group for Reverse Proxy Instances in DMZ",
				"VpcId": {
					"Ref": "pProductionVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": {
						"Ref": "pProductionCIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": {
						"Ref": "pProductionCIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "pManagementCIDR"
					}
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "udp",
					"FromPort": "123",
					"ToPort": "123",
					"CidrIp": {
						"Ref": "pProductionCIDR"
					}
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "sg-reverse-proxy-dmz-instances"
				}, {
					"Key": "Environment",
					"Value": {
						"Ref": "pEnvironment"
					}
				}]
			}
		},
		"rSecurityGroupApp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group for Appservers ELB",
				"VpcId": {
					"Ref": "pProductionVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": {
						"Ref": "pProductionCIDR"
					}
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "sg-app-server-elb"
				}, {
					"Key": "Environment",
					"Value": {
						"Ref": "pEnvironment"
					}
				}]
			}
		},
		"rSecurityGroupAppInstance": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group for Appserver Instances",
				"VpcId": {
					"Ref": "pProductionVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": {
						"Ref": "pProductionCIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": {
						"Ref": "pProductionCIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "pManagementCIDR"
					}
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "udp",
					"FromPort": "123",
					"ToPort": "123",
					"CidrIp": {
						"Ref": "pProductionCIDR"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "3306",
					"ToPort": "3306",
					"CidrIp": {
						"Ref": "pProductionCIDR"
					}
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "sg-app-server-elb-instances"
				}, {
					"Key": "Environment",
					"Value": {
						"Ref": "pEnvironment"
					}
				}]
			}
		},
		"rSecurityGroupRDS": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Port 3306 database for access",
				"VpcId": {
					"Ref": "pProductionVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "3306",
					"ToPort": "3306",
					"SourceSecurityGroupId": {
						"Ref": "rSecurityGroupAppInstance"
					}
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "sg-database-access"
				}, {
					"Key": "Environment",
					"Value": {
						"Ref": "pEnvironment"
					}
				}]
			}
		},
		"rWebContentBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"AccessControl": "Private",
				"LifecycleConfiguration": {
					"Rules": [{
						"Id": "Transition90daysRetain7yrs",
						"Status": "Enabled",
						"ExpirationInDays": "2555",
						"Transition": {
							"TransitionInDays": "90",
							"StorageClass": {
								"Fn::If": ["SupportsGlacier", "GLACIER", "STANDARD_IA"]
							}
						}
					}]
				},
				"VersioningConfiguration": {
					"Status": "Enabled"
				}
			},
			"DeletionPolicy": "Delete"
		},
		"rWebContentS3Policy": {
			"Type": "AWS::S3::BucketPolicy",
			"DependsOn": "rWebContentBucket",
			"Properties": {
				"Bucket": {
					"Ref": "rWebContentBucket"
				},
				"PolicyDocument": {
					"Statement": [{
						"Sid": "EnforceSecureTransport",
						"Action": "s3:*",
						"Effect": "Deny",
						"Principal": "*",
						"Resource": {
							"Fn::Join": ["", [
								"arn:", {
									"Fn::If": ["IsGovCloud", "aws-us-gov", "aws"]
								},
								":s3:::", {
									"Ref": "rWebContentBucket"
								}
							]]
						},
						"Condition": {
							"Bool": {
								"aws:SecureTransport": false
							}
						}
					}, {
						"Sid": "EnforceEncryptionOnPut",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": ["", [
								"arn:", {
									"Fn::If": ["IsGovCloud", "aws-us-gov", "aws"]
								},
								":s3:::", {
									"Ref": "rWebContentBucket"
								},
								"/*"
							]]
						},
						"Condition": {
							"StringNotEquals": {
								"s3:x-amz-server-side-encryption": "AES256"
							}
						}
					}]
				}
			}
		},
		"rDBSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "MySQL RDS Subnet Group",
				"SubnetIds": [{
					"Ref": "pDBPrivateSubnetA"
				}, {
					"Ref": "pDBPrivateSubnetB"
				}]
			}
		},
		"rRDSInstanceMySQL": {
			"Type": "AWS::RDS::DBInstance",
			"DependsOn": ["rDBSubnetGroup", "rSecurityGroupRDS"],
			"Properties": {
				"DBName": {
					"Ref": "pDBName"
				},
				"Engine": "MySQL",
				"MultiAZ": "true",
				"StorageEncrypted": "true",
				"MasterUsername": {
					"Ref": "pDBUser"
				},
				"MasterUserPassword": {
					"Ref": "pDBPassword"
				},
				"DBInstanceClass": {
					"Ref": "pDBClass"
				},
				"AllocatedStorage": {
					"Ref": "pDBAllocatedStorage"
				},
				"VPCSecurityGroups": [{
					"Ref": "rSecurityGroupRDS"
				}],
				"DBSubnetGroupName": {
					"Ref": "rDBSubnetGroup"
				}
			}
		},
		"rRDSInstancePostgreSQL": {
			"Type": "AWS::RDS::DBInstance",
			"DependsOn": ["rDBSubnetGroup", "rSecurityGroupRDS"],
			"Properties": {
				"DBName": {
					"Ref": "pDBName"
				},
				"Engine": "PostgreSQL",
				"MultiAZ": "true",
				"StorageEncrypted": "true",
				"MasterUsername": {
					"Ref": "pDBUser"
				},
				"MasterUserPassword": {
					"Ref": "pDBPassword"
				},
				"DBInstanceClass": {
					"Ref": "pDBClass"
				},
				"AllocatedStorage": {
					"Ref": "pDBAllocatedStorage"
				},
				"VPCSecurityGroups": [{
					"Ref": "rSecurityGroupRDS"
				}],
				"DBSubnetGroupName": {
					"Ref": "rDBSubnetGroup"
				}
			}
		},
		"rELBApp": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"DependsOn": ["rS3ELBAccessLogs", "rSecurityGroupApp", "rS3AccessLogsPolicy"],
			"Properties": {
				"Subnets": [{
					"Ref": "pAppPrivateSubnetA"
				}, {
					"Ref": "pAppPrivateSubnetB"
				}],
				"HealthCheck": {
					"HealthyThreshold": "2",
					"Interval": "15",
					"Target": "TCP:80",
					"Timeout": "5",
					"UnhealthyThreshold": "3"
				},
				"AccessLoggingPolicy": {
					"S3BucketName": {
						"Ref": "rS3ELBAccessLogs"
					},
					"S3BucketPrefix": "Logs",
					"Enabled": "true",
					"EmitInterval": "60"
				},
				"SecurityGroups": [{
					"Ref": "rSecurityGroupApp"
				}],
				"Listeners": [{
					"InstancePort": "80",
					"LoadBalancerPort": "80",
					"Protocol": "HTTP",
					"InstanceProtocol": "HTTP"
				}],
				"Scheme": "internal",
				"Tags": [{
					"Key": "Name",
					"Value": "ProxyELB"
				}, {
					"Key": "Environment",
					"Value": {
						"Ref": "pEnvironment"
					}
				}]
			}
		},
		"rELBWeb": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"DependsOn": ["rS3ELBAccessLogs", "rSecurityGroupWeb", "rS3AccessLogsPolicy"],
			"Properties": {
				"Subnets": [{
					"Ref": "pDMZSubnetA"
				}, {
					"Ref": "pDMZSubnetB"
				}],
				"HealthCheck": {
					"HealthyThreshold": "2",
					"Interval": "30",
					"Target": "TCP:80",
					"Timeout": "5",
					"UnhealthyThreshold": "5"
				},
				"AccessLoggingPolicy": {
					"S3BucketName": {
						"Ref": "rS3ELBAccessLogs"
					},
					"S3BucketPrefix": "Logs",
					"Enabled": "true",
					"EmitInterval": "60"
				},
				"SecurityGroups": [{
					"Ref": "rSecurityGroupWeb"
				}],
				"Listeners": [{
					"InstancePort": "80",
					"LoadBalancerPort": "80",
					"Protocol": "HTTP",
					"InstanceProtocol": "HTTP"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "Proxy ELB"
				}, {
					"Key": "Environment",
					"Value": {
						"Ref": "pEnvironment"
					}
				}]
			}
		},
		"rAutoScalingConfigWeb": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"DependsOn": ["rELBApp", "rAutoScalingGroupApp"],
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"packages": {
							"yum": {
								"nginx": [],
								"java-1.6.0-openjdk-devel": [],
								"git": []
							}
						},
						"files": {
							"/tmp/nginx/default.conf": {
								"content": {
									"Fn::Join": ["", [
										"server {\n",
										"listen 80;\n",
										"listen [::]:80 default ipv6only=on;\n",
										"charset utf-8;\n",
										"location / {\n",
										"proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n",
										"proxy_set_header Host $http_host;\n",
										"proxy_redirect off;\n\n",
										"proxy_pass https://", {
											"Fn::GetAtt": ["rELBApp", "DNSName"]
										}, "/;\n", "\n", "}\n", "}\n"
									]]
								},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							}
						},
						"services": {
							"sysvinit": {
								"nginx": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": ["/etc/nginx/conf.d/default.conf"]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"AssociatePublicIpAddress": "True",
				"ImageId": {
					"Ref": "pWebServerAMI"
				},
				"InstanceType": {
					"Ref": "pWebInstanceType"
				},
				"KeyName": {
					"Ref": "pEC2KeyPair"
				},
				"SecurityGroups": [{
					"Ref": "rSecurityGroupWebInstance"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",

							"yum update -y aws-cfn-bootstrap\n",
							"/opt/aws/bin/cfn-init -v ",
							"         --stack ", {
								"Ref": "AWS::StackName"
							},
							"         --resource rAutoScalingConfigWeb ",
							"         --region ", {
								"Ref": "AWS::Region"
							}, "\n",
							"## Nginx setup\n",
							"sleep 5\n",
							"cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf\n",
							"service nginx stop\n",
							"sed -i '/default_server;/d' /etc/nginx/nginx.conf\n",
							"sleep 10\n",
							"service nginx restart\n"
						]]
					}
				}
			}
		},
		"rAutoScalingGroupWeb": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigWeb",
			"Properties": {
				"AvailabilityZones": [{
					"Ref": "pRegionAZ1Name"
				}, {
					"Ref": "pRegionAZ2Name"
				}],
				"VPCZoneIdentifier": [{
					"Ref": "pDMZSubnetA"
				}, {
					"Ref": "pDMZSubnetB"
				}],
				"LaunchConfigurationName": {
					"Ref": "rAutoScalingConfigWeb"
				},
				"MinSize": "2",
				"MaxSize": "4",
				"LoadBalancerNames": [{
					"Ref": "rELBWeb"
				}],
				"HealthCheckType": "ELB",
				"HealthCheckGracePeriod": "300",
				"Tags": [{
					"Key": "Name",
					"Value": "Proxy Server",
					"PropagateAtLaunch": "true"
				}, {
					"Key": "Environment",
					"Value": {
						"Ref": "pEnvironment"
					},
					"PropagateAtLaunch": "true"
				}]
			}
		},
		"rAutoScalingUpWeb": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupWeb"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "1"
			}
		},
		"rAutoScalingDownWeb": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupWeb"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "-1"
			}
		},
		"rCWAlarmHighCPUWeb": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "50",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "60",
				"AlarmActions": [{
					"Ref": "rAutoScalingUpWeb"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupWeb"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},
		"rCWAlarmLowCPUWeb": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": "rAutoScalingGroupWeb",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "10",
				"AlarmDescription": "Alarm if CPU too too, remove a webserver",
				"Period": "60",
				"AlarmActions": [{
					"Ref": "rAutoScalingDownWeb"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupWeb"
					}
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},
		"rAutoScalingConfigApp": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"DependsOn": "rRDSInstanceMySQL",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"wordpress_install": ["install_cfn", "copy_landing_content", "install_wordpress"]
					},
					"install_cfn": {
						"files": {
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": ["", [
										"[main]\n",
										"stack=", {
											"Ref": "AWS::StackId"
										}, "\n",
										"region=", {
											"Ref": "AWS::Region"
										}, "\n"
									]]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": ["", [
										"[cfn-auto-reloader-hook]\n",
										"triggers=post.update\n",
										"path=Resources.rAutoScalingConfigApp.Metadata.AWS::CloudFormation::Init\n",
										"action=/opt/aws/bin/cfn-init -v ",
										"         --stack ", {
											"Ref": "AWS::StackName"
										},
										"         --resource rAutoScalingConfigApp ",
										"         --configsets wordpress_install ",
										"         --region ", {
											"Ref": "AWS::Region"
										}, "\n"
									]]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							}
						},
						"services": {
							"sysvinit": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
								}
							}
						}
					},

					"copy_landing_content": {
						"sources": {
							"/var/www/html": {"Fn::Join": ["", [{"Ref":"pTemplateUrlPrefix"}, "assets/landing.zip"]]}
						},
						"commands": {
							"01_configure_permissions": {
								"command": "sudo chmod 644 /var/www/html/landing.html"
							},
							"02_configure_permissions": {
								"command": "sudo chmod 755 -R /var/www/html/images"
							}
						}
					},

					"install_wordpress": {
						"packages": {
							"yum": {
								"php": [],
								"php-mysql": [],
								"mysql": [],
								"httpd": []
							}
						},
						"sources": {
							"/var/www/html": {"Fn::Join": ["", [{"Ref":"pTemplateUrlPrefix"}, "assets/wordpress-latest.tar.gz"]]}
						},
						"files": {
							"/tmp/create-wp-config": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash\n",
										"cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php\n",
										"sed -i \"s/'database_name_here'/'", {
											"Ref": "pDBName"
										}, "'/g\" wp-config.php\n",
										"sed -i \"s/'username_here'/'", {
											"Ref": "pDBUser"
										}, "'/g\" wp-config.php\n",
										"sed -i \"s/'password_here'/'", {
											"Ref": "pDBPassword"
										}, "'/g\" wp-config.php\n",
										"sed -i \"s/'localhost'/'", {
											"Fn::GetAtt": ["rRDSInstanceMySQL", "Endpoint.Address"]
										}, "'/g\" wp-config.php\n",
										"sed -i \"/DB_HOST/a define('FORCE_SSL_ADMIN', true);\" wp-config.php\n",
										"sed -i \"/FORCE_SSL_ADMIN/a if (strpos(\\$_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false) { \\$_SERVER['HTTPS']='on'; }\" wp-config.php\n"
									]]
								},
								"mode": "000500",
								"owner": "apache",
								"group": "apache"
							}
						},
						"commands": {
							"01_configure_wordpress": {
								"command": "/tmp/create-wp-config",
								"cwd": "/var/www/html/wordpress"
							}
						},
						"services": {
							"sysvinit": {
								"httpd": {
									"enabled": "true",
									"ensureRunning": "true"
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Ref": "pAppAmi"
				},
				"InstanceType": {
					"Ref": "pAppInstanceType"
				},
				"KeyName": {
					"Ref": "pEC2KeyPair"
				},
				"SecurityGroups": [{
					"Ref": "rSecurityGroupAppInstance"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash -xe\n",
							"yum update -y aws-cfn-bootstrap\n",

							"/opt/aws/bin/cfn-init -v ",
							"         --stack ", {
								"Ref": "AWS::StackName"
							},
							"         --resource rAutoScalingConfigApp ",
							"         --configsets wordpress_install ",
							"         --region ", {
								"Ref": "AWS::Region"
							}, "\n",

							"/opt/aws/bin/cfn-signal -e $? ",
							"         --stack ", {
								"Ref": "AWS::StackName"
							},
							"         --resource rAutoScalingGroupApp ",
							"         --region ", {
								"Ref": "AWS::Region"
							}, "\n"
						]]
					}
				}
			}
		},
		"rAutoScalingGroupApp": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigApp",
			"Properties": {
				"AvailabilityZones": [{
					"Ref": "pRegionAZ1Name"
				}, {
					"Ref": "pRegionAZ2Name"
				}],
				"VPCZoneIdentifier": [{
					"Ref": "pAppPrivateSubnetA"
				}, {
					"Ref": "pAppPrivateSubnetB"
				}],
				"LaunchConfigurationName": {
					"Ref": "rAutoScalingConfigApp"
				},
				"MinSize": "2",
				"MaxSize": "4",
				"LoadBalancerNames": [{
					"Ref": "rELBApp"
				}],
				"HealthCheckType": "ELB",
				"HealthCheckGracePeriod": "300",
				"Tags": [{
					"Key": "Name",
					"Value": "AppServer",
					"PropagateAtLaunch": "true"
				}, {
					"Key": "Environment",
					"Value": {
						"Ref": "pEnvironment"
					},
					"PropagateAtLaunch": "true"
				}]
			}
		},
		"rAutoScalingDownApp": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupApp"
				},
				"Cooldown": "1",
				"ScalingAdjustment": "1"
			}
		},
		"rAutoScalingUpApp": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupApp"
				},
				"Cooldown": "1",
				"ScalingAdjustment": "-1"
			}
		},
		"rCWAlarmHighCPUApp": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "50",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "60",
				"AlarmActions": [{
					"Ref": "rAutoScalingDownApp"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupApp"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},
		"rCWAlarmLowCPUApp": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "10",
				"AlarmDescription": "Alarm if CPU too too, remove a webseerver",
				"Period": "60",
				"AlarmActions": [{
					"Ref": "rAutoScalingUpApp"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupApp"
					}
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},
		"rPostProcInstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "PostProcePermissions",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Sid": "UploadServerCertificate",
							"Effect": "Allow",
							"Action": [
								"iam:ListServerCertificates",
								"iam:UploadServerCertificate"
							],
							"Resource": [
								"*"
							]
						}, {
							"Sid": "CreateLoadBalancerListener",
							"Effect": "Allow",
							"Action": [
								"elasticloadbalancing:CreateLoadBalancerListeners"
							],
							"Resource": [
								"*"
							]
						}, {
							"Sid": "PublishNotificationTopic",
							"Effect": "Allow",
							"Action": [
								"sns:Publish"
							],
							"Resource": [{
								"Ref": "pSecurityAlarmTopic"
							}]
						}, {
							"Sid": "SelfDestruct",
							"Effect": "Allow",
							"Action": [
								"ec2:TerminateInstances"
							],
							"Resource": [
								"*"
							]
						}]
					}
				}]
			}
		},
		"rPostProcInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "rPostProcInstanceRole"
				}]
			}
		},
		"rPostProcInstance": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": ["rAutoScalingConfigApp", "rAutoScalingConfigWeb"],
			"Properties": {
				"ImageId": {
					"Ref": "pWebServerAMI"
				},
				"InstanceType": {
					"Ref": "pAppInstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "rPostProcInstanceProfile"
				},
				"SubnetId": {
					"Ref": "pAppPrivateSubnetA"
				},
				"SecurityGroupIds": [{
					"Ref": "rSecurityGroupAppInstance"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", ["#!/bin/bash -xe\n",

							"echo Configure the region, necessary especially for GovCloud\n",
							"aws configure set region ", {"Ref": "AWS::Region"}, "\n",

							"echo Determine whether a certificate needs to be generated\n",
							"cert_arn=$(aws iam list-server-certificates --query 'ServerCertificateMetadataList[?ServerCertificateName==`non-production-testing-server-cert`].Arn' --output text)\n",
							"if [[ $(echo \"$cert_arn\" | grep \"non-production-testing-server-cert\") != *\"non-production-testing-server-cert\"* ]]; then\n",

							"echo *** Beginnning ELB HTTPS configuration ***\n",

							"echo Generating private key...\n",
							"sudo openssl genrsa -out /tmp/my-private-key.pem 2048\n",

							"echo Creating CSR\n",
							"sudo openssl req -sha256 -new -key /tmp/my-private-key.pem -out /tmp/csr.pem -subj \"/C=US/ST=Washington/L=Seattle/O=NonProductionTestCert/CN=NonProductionTestCert\"\n",

							"echo Self-signing certificate...\n",
							"sudo openssl x509 -req -days 365 -in /tmp/csr.pem -signkey /tmp/my-private-key.pem -out /tmp/my-certificate.pem\n",

							"sudo openssl rsa -in /tmp/my-private-key.pem -outform PEM\n",

							"echo Converting private key...\n",
							"sudo openssl x509 -inform PEM -in /tmp/my-certificate.pem\n",

							"echo Uploading key to AWS IAM and saving ARN to environment variable...\n",
							"cert_arn=$(aws iam upload-server-certificate --server-certificate-name non-production-testing-server-cert --query 'ServerCertificateMetadata.Arn' --output text --certificate-body file:///tmp/my-certificate.pem --private-key file:///tmp/my-private-key.pem)\n",

							"echo Sleeping so IAM can propogate the certificate...\n",
							"sleep 10\n",

							"echo Removing key files...\n",
							"sudo rm /tmp/*.pem\n",

							"fi\n",

							"echo Creating ELB HTTPS listener using the cert stored in the environment variable...\n",
							"aws elb create-load-balancer-listeners --load-balancer-name ", {
								"Ref": "rELBWeb"
							}, " --listeners \"Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80,SSLCertificateId=$cert_arn\" --region ", {
								"Ref": "AWS::Region"
							}, "\n",

							"aws elb create-load-balancer-listeners --load-balancer-name ", {
								"Ref": "rELBApp"
							}, " --listeners \"Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80,SSLCertificateId=$cert_arn\" --region ", {
								"Ref": "AWS::Region"
							}, "\n",

							"echo Send notification message...\n",
							"aws sns publish",
							" --topic-arn ", {
								"Ref": "pSecurityAlarmTopic"
							},
							" --subject \"CloudFormation successfully launched ", {
								"Ref": "AWS::StackName"
							}, "\"",
							" --message \"What now? Click here for more information: ", {
								"Fn::Join": ["", ["https://", {
									"Fn::GetAtt": ["rELBWeb", "DNSName"]
								}, "/landing.html"]]
							}, ".",
							" Please note that the application server might be finishing up its initialization. If the link doesn't respond right away, please try it again in few minutes. This page resides on an application server in your new environment.\" ",
							" --region ", {
								"Ref": "AWS::Region"
							},
							"\n",

							"echo Self-destruct!\n",
							"aws ec2 terminate-instances --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --region ", {
								"Ref": "AWS::Region"
							}, "\n",

							"echo *** ELB HTTPS configuration complete ***\n"
						]]
					}
				},
				"Tags": [{
					"Key": "Name",
					"Value": "PostProcessor"
				}]
			}
		}
	},
	"Outputs": {
		"LandingPageURL": {
			"Value": {
				"Fn::Join": ["", ["https://", {
					"Fn::GetAtt": ["rELBWeb", "DNSName"]
				}, "/landing.html"]]
			},
			"Description": "Landing Page"
		},
		"WebsiteURL": {
			"Value": {
				"Fn::Join": ["", ["https://", {
					"Fn::GetAtt": ["rELBWeb", "DNSName"]
				}, "/wordpress/wp-admin/install.php"]]
			},
			"Description": "WordPress Website (demonstration purposes only)"
		},
		"rSecurityGroupWeb": {
			"Value": {
				"Ref": "rSecurityGroupWeb"
			}
		},
		"rSecurityGroupApp": {
			"Value": {
				"Ref": "rSecurityGroupApp"
			}
		},
		"rSecurityGroupRDS": {
			"Value": {
				"Ref": "rSecurityGroupRDS"
			}
		},
		"SurveyLink": {
			"Description": "Please take a moment to complete the survey by clicking this link",
			"Value": "https://aws.au1.qualtrics.com/SE/?SID=SV_55sYYdtY1NhTTgN&qs=nist"
		},
		"Help": {
			"Description": "For assistance or questions regarding this quickstart please email compliance-accelerator@amazon.com",
			"Value": ""
		}
	}
}
